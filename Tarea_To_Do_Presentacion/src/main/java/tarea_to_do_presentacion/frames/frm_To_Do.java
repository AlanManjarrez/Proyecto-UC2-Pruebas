package tarea_to_do_presentacion.frames;

import java.awt.Component;
import static java.awt.SystemColor.control;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.EventObject;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.AbstractCellEditor;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import tarea_to_do_control_tarea.negocio.Control_Tarea;
import tarea_to_do_control_usuario.negocio.Control_Usuario;
import tarea_to_do_dto.dto.Estado_DTO;
import tarea_to_do_dto.dto.Tarea_DTO;
import tarea_to_do_dto.dto.Usuario_DTO;

/**
 *
 * @author Jose Alan Manjarrez Ontiveros 228982
 * @author Jesus Eduardo Villanueva Godoy 235078
 */
public class frm_To_Do extends javax.swing.JFrame {

    Usuario_DTO usuario;
    Control_Usuario controlU;
    Control_Tarea controlT;
    /**
     * Creates new form frm_To_Do
     */
    public frm_To_Do(Usuario_DTO usuario) {
        initComponents();
        this.usuario = usuario;
        controlU =new Control_Usuario();
        controlT= new Control_Tarea();
        llenarTabla(jTarea, controlU.listaTareaUsuario(this.usuario));
        setResizable(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnModificar = new javax.swing.JButton();
        btnCrearTarea = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTarea = new javax.swing.JTable();
        jcbFiltro = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jEliminarTarea = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 204, 153));

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Tareas To Do");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Filtro:");

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnCrearTarea.setText("Crear Tarea");
        btnCrearTarea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearTareaActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Lista De Tareas");

        jLabel4.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Ordenar:");

        jTarea.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Tareas", "Estado", "Fecha"
            }
        ));
        jScrollPane1.setViewportView(jTarea);

        jcbFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Completada", "Pendiente", "Todo" }));
        jcbFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbFiltroActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Estado", "Fecha" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jEliminarTarea.setText("Eliminar Tarea");
        jEliminarTarea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEliminarTareaActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(11, 11, 11))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(31, 31, 31))
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(btnSalir)))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCrearTarea)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(jEliminarTarea)
                        .addGap(41, 41, 41)
                        .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(145, 145, 145))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91)
                        .addComponent(btnSalir)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrearTarea)
                    .addComponent(btnModificar)
                    .addComponent(jEliminarTarea))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        int row = jTarea.getSelectedRow();

        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una tarea para modificar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Long tareaId = (Long) jTarea.getValueAt(row, 3);  

        if (tareaId == null) {
            JOptionPane.showMessageDialog(this, "No se pudo obtener el ID de la tarea.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        frm_Modificar_Tarea modificar_Tarea = new frm_Modificar_Tarea(this.usuario, tareaId);

        modificar_Tarea.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnCrearTareaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearTareaActionPerformed
        frm_Crear_Tarea crear_tarea = new frm_Crear_Tarea(this.usuario);
        crear_tarea.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnCrearTareaActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        frm_Inicio inicio = new frm_Inicio();
        inicio.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void jEliminarTareaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEliminarTareaActionPerformed
        int row = jTarea.getSelectedRow();

        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una tarea para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Object idValue = jTarea.getValueAt(row, 3);  
        Long tareaId = null;

        if (idValue instanceof String) {
            try {
                tareaId = Long.valueOf((String) idValue);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "ID de tarea inválido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } else if (idValue instanceof Long) {
            tareaId = (Long) idValue; 
        } else {
            JOptionPane.showMessageDialog(this, "Tipo de ID no válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        List<Tarea_DTO> tareas = controlU.listaTareaUsuario(usuario);
        Tarea_DTO tareaAEliminar = null;
        for (Tarea_DTO tarea : tareas) {
            if (tarea.getId().equals(tareaId)) {
                tareaAEliminar = tarea;
                break;
            }
        }

        if (tareaAEliminar == null) {
            JOptionPane.showMessageDialog(this, "No se encontró la tarea seleccionada.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        controlT.eliminarTarea(tareaAEliminar);
        
        tareas=controlU.listaTareaUsuario(usuario);
        
        llenarTabla(jTarea, tareas);

        JOptionPane.showMessageDialog(this, "Tarea eliminada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jEliminarTareaActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        actualizarTabla();
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jcbFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbFiltroActionPerformed
        actualizarTabla();
    }//GEN-LAST:event_jcbFiltroActionPerformed
    
    private void llenarTabla(JTable table, List<Tarea_DTO> tareas) {
        DefaultTableModel modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 2; 
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 2) {
                    return Boolean.class; 
                }
                return super.getColumnClass(columnIndex);
            }
        };

        modelo.addColumn("Nombre");
        modelo.addColumn("Fecha");
        modelo.addColumn("Estado");

        modelo.addColumn("ID");

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");


        for (Tarea_DTO tarea : tareas) {
            Calendar fecha = tarea.getFecha();
            String fechaFormateada = sdf.format(fecha.getTime());

            boolean completada = tarea.getEstado() == Estado_DTO.COMPLETADAS;

            modelo.addRow(new Object[] {
                tarea.getNombre(),
                fechaFormateada,
                completada,
                tarea.getId() 
            });
        }

        table.setModel(modelo);

        table.getColumnModel().getColumn(3).setMinWidth(0);
        table.getColumnModel().getColumn(3).setMaxWidth(0);
        table.getColumnModel().getColumn(3).setWidth(0);

        table.getColumnModel().getColumn(2).setCellEditor(new CheckBoxCellEditor(tareas));
        
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {  
                    int row = table.getSelectedRow();
                    Long tareaId = (Long) table.getValueAt(row, 3);  

                    Tarea_DTO tareaSeleccionada = null;
                    for (Tarea_DTO tarea : tareas) {
                        if (tarea.getId().equals(tareaId)) {
                            tareaSeleccionada = tarea;
                            break;
                        }
                    }

                    if (tareaSeleccionada != null) {
                        mostrarDescripcionTarea(tareaSeleccionada); 
                    }
                }
            }
        });
        
        
        table.getModel().addTableModelListener(e -> {
            if (e.getColumn() == 2) {
                int row = e.getFirstRow();
                boolean isChecked = (Boolean) table.getValueAt(row, 2);

                Tarea_DTO tarea = tareas.get(row);

                if (isChecked && tarea.getEstado() != Estado_DTO.COMPLETADAS) {
                    controlT.cambiarEstado(tarea, Estado_DTO.COMPLETADAS);
                } else if (!isChecked && tarea.getEstado() == Estado_DTO.COMPLETADAS) {
                    table.setValueAt(true, row, 2); 
                }
            }
        });
    }

    class CheckBoxCellEditor extends AbstractCellEditor implements TableCellEditor {
        private JCheckBox checkBox;
        private boolean isEditable;

        private List<Tarea_DTO> tareas;

        public CheckBoxCellEditor(List<Tarea_DTO> tareas) {
            this.checkBox = new JCheckBox();
            this.isEditable = true;
            this.tareas = tareas;
        }

        @Override
        public Object getCellEditorValue() {
            return checkBox.isSelected();
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            checkBox.setSelected((Boolean) value);

            Tarea_DTO tarea = tareas.get(row);
            boolean isCompletada = tarea.getEstado() == Estado_DTO.COMPLETADAS;

            checkBox.setEnabled(!isCompletada); 

            isEditable = !isCompletada; 

            return checkBox;
        }

        @Override
        public boolean isCellEditable(EventObject anEvent) {
            return isEditable; 
        }
    }
    
    private void actualizarTabla() {
        
        List<Tarea_DTO> tareas = controlU.listaTareaUsuario(usuario);

        String filtroSeleccionado = (String) jcbFiltro.getSelectedItem();

        if (filtroSeleccionado != null && !filtroSeleccionado.equals("Todo")) {
            tareas = tareas.stream().filter(t -> {
                switch (filtroSeleccionado) {
                    case "Completada":
                        return t.getEstado() == Estado_DTO.COMPLETADAS;
                    case "Pendiente":
                        return t.getEstado() == Estado_DTO.PENDIENTES;
                    default:
                        return true; 
                }
            }).collect(Collectors.toList());
        }

        String ordenSeleccionado = (String) jComboBox2.getSelectedItem();
        switch (ordenSeleccionado) {
            case "Nombre":
                Collections.sort(tareas, Comparator.comparing(Tarea_DTO::getNombre));
                break;
            case "Estado":
                Collections.sort(tareas, Comparator.comparing(Tarea_DTO::getEstado));
                break;
            case "Fecha":
                Collections.sort(tareas, Comparator.comparing(Tarea_DTO::getFecha));
                break;
            default:
                break;
        }

        llenarTabla(jTarea, tareas);

    }
    
    
    private void mostrarDescripcionTarea(Tarea_DTO tarea) {
        JOptionPane.showMessageDialog(this, tarea.getDescripcion(),"Descripción de la Tarea: " + tarea.getDescripcion(), JOptionPane.INFORMATION_MESSAGE);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCrearTarea;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JButton jEliminarTarea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTarea;
    private javax.swing.JComboBox<String> jcbFiltro;
    // End of variables declaration//GEN-END:variables
}
